"""
This type stub file was generated by pyright.
"""

from .exceptions_ import *

def valid_profile(f): # -> (self: Unknown, *args: Unknown, **kwargs: Unknown) -> Unknown:
    ...

class Twitter:
    def __init__(self, profile_name: str = ..., max_retires: int = ..., proxy: dict = ...) -> None:
        """
        Initialize the Twitter Class

        :param profile_name: (`str`) Profile URL or The Username of the user you are dealing with
        :param max_retires: (`int`) Number of retries the script would make , if the guest token wasn't found
        :param proxy: (`dict`) Provide the proxy you want to use while making a request
        """
        ...
    
    def get_user_info(self, banner_extensions: bool = ..., image_extensions: bool = ...): # -> User:
        """
        Get the user available info

        :param banner_extensions: (`boolean`) Get the Banner extension on the user page
        :param image_extensions: (`boolean`) Get the Image extension on the user page

        :return: .types.twDataTypes.User
        """
        ...
    
    @property
    def user_id(self): # -> None:
        """
        Get the user unique twitter id

        :return: int
        """
        ...
    
    @valid_profile
    def get_tweets(self, pages: int = ..., replies: bool = ..., wait_time: int = ..., cursor: str = ...): # -> UserTweets:
        """
        Get the tweets from a user

        :param pages: (`int`) number of pages to be scraped
        :param replies: (`boolean`) get the replied tweets of the user too
        :param wait_time: (`int`) seconds to wait between multiple requests
        :param cursor: Pagination cursor if you want to get the pages from that cursor up-to (This cursor is different from actual API cursor)


        :return: .types.usertweet.UserTweets
        """
        ...
    
    def get_trends(self): # -> list[Unknown]:
        """
        Get the Trends from you locale

        :return:list of .types.twDataTypes.Trends
        """
        ...
    
    def search(self, keyword: str, pages: int = ..., filter_: str = ..., wait_time: int = ..., cursor: str = ...): # -> Search:
        """
        Search for a keyword or hashtag on Twitter

        :param keyword: (`str`) The keyword which is supposed to be searched
        :param pages: (`int`) The number of pages to get
        :param filter_: (
           `str`| `filters.SearchFilters.Users()`| `filters.SearchFilters.Latest()` | `filters.SearchFilters.Photos()` | `filters.SearchFilters.Videos()`
        )
        :param wait_time : (`int`) seconds to wait between multiple requests
        :param cursor: (`str`) Pagination cursor if you want to get the pages from that cursor up-to (This cursor is different from actual API cursor)


        :return: .types.search.Search
        """
        ...
    
    def tweet_detail(self, identifier: str): # -> Tweet | None:
        """
        Get Detail of a single tweet

        :param identifier: (`str`) The unique identifier of the tweet , either the `Tweet id` or `Tweet Link`

        :return: .types.twDataTypes.Tweet
        """
        ...
    


